// ====== Class declarations ====== //
class POLYNOMIAL {
	public evaluate(float x) : float;
};

class LINEAR inherits POLYNOMIAL {
	private float a;
	public float b;
	
	public build(float A, float B) : LINEAR;
	private evaluate(float x) : float;
};

class QUADRATIC inherits POLYNOMIAL {
	public float a;
	private float b;
	private float c;
	
	public build(float A, float B, float C) : QUADRATIC;
	public evaluate(float x) : float;
};

// ====== Function Definitions ====== //
POLYNOMIAL::evaluate(float x) : float
  do
    return (0.0);
  end

LINEAR::evaluate(float x) : float
  local
    float result;
  do
    result = 0.0;
    result = a * x + b;
    return (result);
  end
  
QUADRATIC::evaluate(float x) : float
  local
    float result;
  do    //Using Horner's method
    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  end
  
LINEAR::build(float A, float B) : LINEAR
  local
    LINEAR new_function;
  do
    new_function.a = A;
    new_function.b = B;
    return (new_function);
  end  

QUADRATIC::build(float A, float B, float C) : QUADRATIC
  local
    QUADRATIC new_function;
  do
    new_function.a = A;
    new_function.b = B;
    new_function.c = C;
    return (new_function);
  end

// ====== main ====== //
main
  local
    LINEAR f1;
    QUADRATIC f2;
    float counter;
    float x;
  do
    counter.a = 3; // error
    f1.evaluate(0.5); // private, error
    f2.evaluate(0.1); // public, ok
    f2.evaluate(0); // error
    f2.a = 5; // typeerror
    f2.a = 5.0; // ok
    f2.b = 5.0; //  private, error


  end